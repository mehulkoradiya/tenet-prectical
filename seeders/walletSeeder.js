import mongoose from 'mongoose';
import Wallet from '../models/Wallet.js';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

// Generate sample wallet data (userId will be auto-generated by MongoDB)
const generateWalletData = (count = 5) => {
  const walletData = [];
  for (let i = 0; i < count; i++) {
    walletData.push({
      balance: 100 // Default balance of 100, userId will be auto-generated
    });
  }
  return walletData;
};

const seedWallets = async () => {
  try {
    
    // Connect to MongoDB
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/tenet-practical');
   
    // Clear existing wallets (optional - comment out if you want to keep existing data)
    await Wallet.deleteMany({});
      // Generate wallet data with unique user IDs
    const walletData = generateWalletData(5); // Generate 5 wallets by default
 
   const result = [];
    for (const walletDataItem of walletData) {
      const wallet = new Wallet(walletDataItem);
      const savedWallet = await wallet.save();
      result.push(savedWallet);
    }
   
   
    result.forEach(wallet => {
      console.log(`User ID: ${wallet.userId}, Balance: ${wallet.balance}`);
    });

    console.log('\nSeeding completed successfully!');
  } catch (error) {
    console.error('Error seeding wallets:', error.message);
    console.error('Full error:', error);
  } finally {
    // Close the connection
    if (mongoose.connection.readyState === 1) {
      await mongoose.connection.close();
    }
  }
};

// Run the seeder
console.log('Seeder script loaded, starting execution...');
seedWallets();

export default seedWallets; 